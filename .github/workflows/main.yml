name: "Build & Release"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            name: iOS & macOS
            build_commands: |
              flutter build ipa --no-codesign
              flutter build macos --release
              cd build
              tar -czf ios_build.tar.gz ios
            artifacts: |
              build/ios_build.tar.gz
              build/macos/Build/Products/Release/*
          - os: windows-latest
            name: Windows
            build_commands: |
              flutter build windows --release
            artifacts: |
              build/windows/runner/Release/*
          - os: ubuntu-latest
            name: Android
            build_commands: |
              flutter build apk --release
              flutter build appbundle
            artifacts: |
              build/app/outputs/flutter-apk/app-release.apk
              build/app/outputs/bundle/release/app-release.aab

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Set Up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'oracle'
        java-version: '17'
    - name: Set Up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'
    - name: Install Dependencies
      run: flutter pub get
    - name: Build
      run: ${{ matrix.build_commands }}
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}-builds
        path: ${{ matrix.artifacts }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Extract version from pubspec.yaml
      id: extract_version
      run: |
        version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
        echo "VERSION=$version" >> $GITHUB_ENV
    - name: Check if Tag Exists
      id: check_tag
      run: |
        if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
          echo "TAG_EXISTS=true" >> $GITHUB_ENV
        else
          echo "TAG_EXISTS=false" >> $GITHUB_ENV
        fi
    - name: Modify Tag
      if: env.TAG_EXISTS == 'true'
      id: modify_tag
      run: |
        new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
        echo "VERSION=$new_version" >> $GITHUB_ENV
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        tag_name: v${{ env.VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }} 
